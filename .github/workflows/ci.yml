name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*.*.*']  # Only deploy production on version tags
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, closed]

# Add permissions for the GITHUB_TOKEN
permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Clean install to fix Rollup native bindings
        run: |
          rm -rf node_modules package-lock.json
          npm install --force

      - name: Build project
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1
          overwrite: true

  deploy-preview:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          overwrite: true
      
      - name: Create PR identifier file
        run: |
          echo "PR #${{ github.event.number }} deployed at $(date)" > dist/PR_INFO.txt
          
      - name: Deploy to staging site
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FTP_HOST_PREVIEW }}
          username: ${{ secrets.FTP_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "dist/"
          target: "${{ secrets.FTP_TARGET_PREVIEW }}"
          strip_components: 1
           
      - name: Comment on PR with staging URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const stagingUrl = 'https://${{ secrets.FTP_HOST_PREVIEW }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Deployed to staging! \n\n[View on Staging](${stagingUrl})`
            });

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          overwrite: true
      
      - name: Inject GTM ID for production
        run: |
          find dist -type f -name "*.js" -exec sed -i 's/__GTM_ID_PLACEHOLDER__/${{ secrets.GTM_ID }}/g' {} \;
          
      - name: Deploy to production
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "dist/"
          target: ${{ secrets.FTP_TARGET }}
          strip_components: 1
          
  # Deploy main branch to staging after PR is merged or when main is pushed
  deploy-staging-after-merge:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist
          overwrite: true
      
      - name: Create main branch identifier file
        run: |
          echo "Main branch deployed at $(date)" > dist/BRANCH_INFO.txt
          
      - name: Deploy main branch to staging
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FTP_HOST_PREVIEW }}
          username: ${{ secrets.FTP_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "dist/"
          target: "${{ secrets.FTP_TARGET_PREVIEW }}"
          strip_components: 1
          
  # Reset staging to main branch when PR is closed without merging
  reset-staging-on-pr-close:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install --force
        
      - name: Build project
        run: npm run build
      
      - name: Create reset identifier file
        run: |
          echo "Reset to main branch after PR #${{ github.event.number }} was closed without merging at $(date)" > dist/RESET_INFO.txt
          
      - name: Deploy main branch to staging
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FTP_HOST_PREVIEW }}
          username: ${{ secrets.FTP_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "dist/"
          target: "${{ secrets.FTP_TARGET_PREVIEW }}"
          strip_components: 1
